
// Adding AOI
var AOI= ee.FeatureCollection("users/EdythNeska/mid_regions")

Map.addLayer(AOI,{},'Mid regions');

var PR_195_53 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    // .filterMetadata('WRS_PATH', 'equals', 195) 
    // .filterMetadata('WRS_ROW', 'equals', 54)
    .filterBounds(AOI)
    .filterMetadata('CLOUD_COVER','less_than',30)
    .filterDate('2016-01-01', '2016-12-30');
// Filter by month
var collection=PR_195_53.filter(ee.Filter.calendarRange(1,12,'month'));
print('Collection Landsat 8 bis: ', collection);
//----------------------------------------------------
// Load a landsat 8 image, select the bands of interest.
var image = (ee.Image(collection.toList(200).get(6))).clip(table)
  .select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7']);

var image2 = ee.Image(collection.median().clip(table).copyProperties(image))
  .select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7']);
print('2', image2)
print('1', image)
//
var region = image2.geometry()
// 
// Set some information about the input to be used later.
var scale = 30;
var bandNames = image2.bandNames();

// Mean center the data to enable a faster covariance reducer
// and an SD stretch of the principal components.
var meanDict = image2.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry:AOI,
    scale: scale,
    maxPixels: 1e9
});
var means = ee.Image.constant(meanDict.values(bandNames))
var centered = image2.subtract(means)

// This helper function returns a list of new band names.
var getNewBandNames = function(prefix) {
  var seq = ee.List.sequence(1, bandNames.length());
  return seq.map(function(b) {
    return ee.String(prefix).cat(ee.Number(b).int());
  });
};

// This function accepts mean centered imagery, a scale and
// a region in which to perform the analysis.  It returns the
// Principal Components (PC) in the region as a new image.
var getPrincipalComponents = function(centered, scale, region) {
  // Collapse the bands of the image into a 1D array per pixel.
  var arrays = centered.toArray();

  // Compute the covariance of the bands within the region.
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: AOI,
    scale: scale,
    maxPixels: 1e9
  });

  // Get the 'array' covariance result and cast to an array.
  // This represents the band-to-band covariance within the region.
  var covarArray = ee.Array(covar.get('array'));

  // Perform an eigen analysis and slice apart the values and vectors.
  var eigens = covarArray.eigen();

  // This is a P-length vector of Eigenvalues.
  var eigenValues = eigens.slice(1, 0, 1);
  // This is a PxP matrix with eigenvectors in rows.
  var eigenVectors = eigens.slice(1, 1);
print('eigenValues',eigenValues);
print('eigenVectors',eigenVectors);
  // Convert the array image to 2D arrays for matrix computations.
  var arrayImage = arrays.toArray(1);

  // Left multiply the image array by the matrix of eigenvectors.
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

  // Turn the square roots of the Eigenvalues into a P-band image.
  var sdImage = ee.Image(eigenValues.sqrt())
    .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

  // Turn the PCs into a P-band image, normalized by SD.
  return principalComponents
    // Throw out an an unneeded dimension, [[]] -> [].
    .arrayProject([0])
    // Make the one band array image a multi-band image, [] -> image.
    .arrayFlatten([getNewBandNames('pc')])
    // Normalize the PCs by their SDs.
    .divide(sdImage);
};
//print('sdImage',sdImage);
// Get the PCs at the specified scale and in the specified region
var pcImage = getPrincipalComponents(centered, scale, region);

                  // Plot each PC as a new layer
                  for (var i = 0; i < bandNames.length().getInfo(); i++) {
                    var band = pcImage.bandNames().get(i).getInfo();
                    Map.addLayer(pcImage.select([band]), {min: -2, max: 2}, band,false);
}
//
var pc1=pcImage.select(0);
  Map.addLayer(pc1, {min: -3, max: 2}, 'PC1');
  var bs1=pc1.lt(-0.5);
  Map.addLayer(bs1.mask(bs1), {min: 0, max: 1,palette: ['00FFFF', 'FF0000']}, 'Bare Soil P195 R53');



// // //---------------------------
Export.image.toDrive({
  image: bs1.float(),
  description: 'bare_mask_mid',
  maxPixels: 1e10,
  scale: 30,
  region: AOI
});
